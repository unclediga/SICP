(define (make-rat n d)
  (cons n d))
(define (numer x)
  (car x))
(define (denom x)
  (cdr x))

(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))

(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))
;; -- 2.1 --------------------------------------
(define (make-rat n d)
  (if (and (< (* n d) 0) (< d 0))
      (cons (* -1 n) (* -1 d))
      (cons n d)))
      

(define (mul-rat x y)
  (let ((n (* (numer x) (numer y)))
        (d (* (denom x) (denom y))))
    (if (and (< n 0) (< d 0))
        (make-rat (* -1 n)(* -1 d))
        (make-rat n d))))
;; -- 2.2 --------------------------------------
(define (make-segment x1 y1 x2 y2)
  (cons x1 (cons y1 (cons x2 y2))))
(define (start-segment s)
  (cons (car s) (cadr s)))
(define (end-segment s)
  (cons (caddr s) (cdddr s)))

(define (make-point x y)
  (cons x y))
(define (x-point p)
  (car p))
(define (y-point p)
  (cdr p))
(define (mid-point s)
  (let ((ave (lambda(x y)(+ (/ (- y x) 2.0) x))))
    (make-point (ave (x-point (start-segment s)) (x-point (end-segment s)))
                (ave (y-point (start-segment s)) (y-point (end-segment s))))))


  